// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google_cast_message.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace extensions {
namespace core_api {
namespace cast_channel {

void protobuf_ShutdownFile_cast_5fchannel_2eproto() {
  delete CastMessage::default_instance_;
  delete AuthChallenge::default_instance_;
  delete AuthResponse::default_instance_;
  delete AuthError::default_instance_;
  delete DeviceAuthMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cast_5fchannel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cast_5fchannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CastMessage::default_instance_ = new CastMessage();
  AuthChallenge::default_instance_ = new AuthChallenge();
  AuthResponse::default_instance_ = new AuthResponse();
  AuthError::default_instance_ = new AuthError();
  DeviceAuthMessage::default_instance_ = new DeviceAuthMessage();
  CastMessage::default_instance_->InitAsDefaultInstance();
  AuthChallenge::default_instance_->InitAsDefaultInstance();
  AuthResponse::default_instance_->InitAsDefaultInstance();
  AuthError::default_instance_->InitAsDefaultInstance();
  DeviceAuthMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cast_5fchannel_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cast_5fchannel_2eproto_once_);
void protobuf_AddDesc_cast_5fchannel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cast_5fchannel_2eproto_once_,
                 &protobuf_AddDesc_cast_5fchannel_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cast_5fchannel_2eproto {
  StaticDescriptorInitializer_cast_5fchannel_2eproto() {
    protobuf_AddDesc_cast_5fchannel_2eproto();
  }
} static_descriptor_initializer_cast_5fchannel_2eproto_;
#endif
bool SignatureAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool CastMessage_ProtocolVersion_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;
const int CastMessage::ProtocolVersion_ARRAYSIZE;
#endif  // _MSC_VER
bool CastMessage_PayloadType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CastMessage_PayloadType CastMessage::STRING;
const CastMessage_PayloadType CastMessage::BINARY;
const CastMessage_PayloadType CastMessage::PayloadType_MIN;
const CastMessage_PayloadType CastMessage::PayloadType_MAX;
const int CastMessage::PayloadType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CastMessage::kProtocolVersionFieldNumber;
const int CastMessage::kSourceIdFieldNumber;
const int CastMessage::kDestinationIdFieldNumber;
const int CastMessage::kNamespaceFieldNumber;
const int CastMessage::kPayloadTypeFieldNumber;
const int CastMessage::kPayloadUtf8FieldNumber;
const int CastMessage::kPayloadBinaryFieldNumber;
#endif  // !_MSC_VER

CastMessage::CastMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.core_api.cast_channel.CastMessage)
}

void CastMessage::InitAsDefaultInstance() {
}

CastMessage::CastMessage(const CastMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.core_api.cast_channel.CastMessage)
}

void CastMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocol_version_ = 0;
  source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_type_ = 0;
  payload_utf8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CastMessage::~CastMessage() {
  // @@protoc_insertion_point(destructor:extensions.core_api.cast_channel.CastMessage)
  SharedDtor();
}

void CastMessage::SharedDtor() {
  if (source_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_id_;
  }
  if (destination_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_id_;
  }
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namespace__;
  }
  if (payload_utf8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_utf8_;
  }
  if (payload_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_binary_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CastMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CastMessage& CastMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cast_5fchannel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cast_5fchannel_2eproto();
#endif
  return *default_instance_;
}

CastMessage* CastMessage::default_instance_ = NULL;

CastMessage* CastMessage::New() const {
  return new CastMessage;
}

void CastMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CastMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(protocol_version_, payload_type_);
    if (has_source_id()) {
      if (source_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_id_->clear();
      }
    }
    if (has_destination_id()) {
      if (destination_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destination_id_->clear();
      }
    }
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        namespace__->clear();
      }
    }
    if (has_payload_utf8()) {
      if (payload_utf8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_utf8_->clear();
      }
    }
    if (has_payload_binary()) {
      if (payload_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_binary_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:extensions.core_api.cast_channel.CastMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::core_api::cast_channel::CastMessage_ProtocolVersion_IsValid(value)) {
            set_protocol_version(static_cast< ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_id;
        break;
      }

      // required string source_id = 2;
      case 2: {
        if (tag == 18) {
         parse_source_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_destination_id;
        break;
      }

      // required string destination_id = 3;
      case 3: {
        if (tag == 26) {
         parse_destination_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_namespace;
        break;
      }

      // required string namespace = 4;
      case 4: {
        if (tag == 34) {
         parse_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_payload_type;
        break;
      }

      // required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
      case 5: {
        if (tag == 40) {
         parse_payload_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::core_api::cast_channel::CastMessage_PayloadType_IsValid(value)) {
            set_payload_type(static_cast< ::extensions::core_api::cast_channel::CastMessage_PayloadType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_payload_utf8;
        break;
      }

      // optional string payload_utf8 = 6;
      case 6: {
        if (tag == 50) {
         parse_payload_utf8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload_utf8()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_payload_binary;
        break;
      }

      // optional bytes payload_binary = 7;
      case 7: {
        if (tag == 58) {
         parse_payload_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_binary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.core_api.cast_channel.CastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.core_api.cast_channel.CastMessage)
  return false;
#undef DO_
}

void CastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.core_api.cast_channel.CastMessage)
  // required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol_version(), output);
  }

  // required string source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_id(), output);
  }

  // required string destination_id = 3;
  if (has_destination_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_id(), output);
  }

  // required string namespace = 4;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
  if (has_payload_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->payload_type(), output);
  }

  // optional string payload_utf8 = 6;
  if (has_payload_utf8()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payload_utf8(), output);
  }

  // optional bytes payload_binary = 7;
  if (has_payload_binary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->payload_binary(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:extensions.core_api.cast_channel.CastMessage)
}

int CastMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());
    }

    // required string source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_id());
    }

    // required string destination_id = 3;
    if (has_destination_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination_id());
    }

    // required string namespace = 4;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }

    // required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
    if (has_payload_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());
    }

    // optional string payload_utf8 = 6;
    if (has_payload_utf8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload_utf8());
    }

    // optional bytes payload_binary = 7;
    if (has_payload_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_binary());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CastMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastMessage*>(&from));
}

void CastMessage::MergeFrom(const CastMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_destination_id()) {
      set_destination_id(from.destination_id());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_payload_type()) {
      set_payload_type(from.payload_type());
    }
    if (from.has_payload_utf8()) {
      set_payload_utf8(from.payload_utf8());
    }
    if (from.has_payload_binary()) {
      set_payload_binary(from.payload_binary());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CastMessage::CopyFrom(const CastMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CastMessage::Swap(CastMessage* other) {
  if (other != this) {
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(source_id_, other->source_id_);
    std::swap(destination_id_, other->destination_id_);
    std::swap(namespace__, other->namespace__);
    std::swap(payload_type_, other->payload_type_);
    std::swap(payload_utf8_, other->payload_utf8_);
    std::swap(payload_binary_, other->payload_binary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CastMessage::GetTypeName() const {
  return "extensions.core_api.cast_channel.CastMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthChallenge::kSignatureAlgorithmFieldNumber;
#endif  // !_MSC_VER

AuthChallenge::AuthChallenge()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.core_api.cast_channel.AuthChallenge)
}

void AuthChallenge::InitAsDefaultInstance() {
}

AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.core_api.cast_channel.AuthChallenge)
}

void AuthChallenge::SharedCtor() {
  _cached_size_ = 0;
  signature_algorithm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:extensions.core_api.cast_channel.AuthChallenge)
  SharedDtor();
}

void AuthChallenge::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthChallenge& AuthChallenge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cast_5fchannel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cast_5fchannel_2eproto();
#endif
  return *default_instance_;
}

AuthChallenge* AuthChallenge::default_instance_ = NULL;

AuthChallenge* AuthChallenge::New() const {
  return new AuthChallenge;
}

void AuthChallenge::Clear() {
  signature_algorithm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:extensions.core_api.cast_channel.AuthChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value)) {
            set_signature_algorithm(static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.core_api.cast_channel.AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.core_api.cast_channel.AuthChallenge)
  return false;
#undef DO_
}

void AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.core_api.cast_channel.AuthChallenge)
  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
  if (has_signature_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signature_algorithm(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:extensions.core_api.cast_channel.AuthChallenge)
}

int AuthChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
    if (has_signature_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_algorithm());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthChallenge*>(&from));
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature_algorithm()) {
      set_signature_algorithm(from.signature_algorithm());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {

  return true;
}

void AuthChallenge::Swap(AuthChallenge* other) {
  if (other != this) {
    std::swap(signature_algorithm_, other->signature_algorithm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthChallenge::GetTypeName() const {
  return "extensions.core_api.cast_channel.AuthChallenge";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthResponse::kSignatureFieldNumber;
const int AuthResponse::kClientAuthCertificateFieldNumber;
const int AuthResponse::kIntermediateCertificateFieldNumber;
const int AuthResponse::kSignatureAlgorithmFieldNumber;
#endif  // !_MSC_VER

AuthResponse::AuthResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.core_api.cast_channel.AuthResponse)
}

void AuthResponse::InitAsDefaultInstance() {
}

AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.core_api.cast_channel.AuthResponse)
}

void AuthResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_algorithm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:extensions.core_api.cast_channel.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (client_auth_certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_auth_certificate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthResponse& AuthResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cast_5fchannel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cast_5fchannel_2eproto();
#endif
  return *default_instance_;
}

AuthResponse* AuthResponse::default_instance_ = NULL;

AuthResponse* AuthResponse::New() const {
  return new AuthResponse;
}

void AuthResponse::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    if (has_client_auth_certificate()) {
      if (client_auth_certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_auth_certificate_->clear();
      }
    }
    signature_algorithm_ = 1;
  }
  intermediate_certificate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:extensions.core_api.cast_channel.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client_auth_certificate;
        break;
      }

      // required bytes client_auth_certificate = 2;
      case 2: {
        if (tag == 18) {
         parse_client_auth_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_auth_certificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_intermediate_certificate;
        break;
      }

      // repeated bytes intermediate_certificate = 3;
      case 3: {
        if (tag == 26) {
         parse_intermediate_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_intermediate_certificate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_intermediate_certificate;
        if (input->ExpectTag(32)) goto parse_signature_algorithm;
        break;
      }

      // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
      case 4: {
        if (tag == 32) {
         parse_signature_algorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value)) {
            set_signature_algorithm(static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.core_api.cast_channel.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.core_api.cast_channel.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.core_api.cast_channel.AuthResponse)
  // required bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // required bytes client_auth_certificate = 2;
  if (has_client_auth_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_auth_certificate(), output);
  }

  // repeated bytes intermediate_certificate = 3;
  for (int i = 0; i < this->intermediate_certificate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->intermediate_certificate(i), output);
  }

  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
  if (has_signature_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->signature_algorithm(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:extensions.core_api.cast_channel.AuthResponse)
}

int AuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // required bytes client_auth_certificate = 2;
    if (has_client_auth_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_auth_certificate());
    }

    // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
    if (has_signature_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_algorithm());
    }

  }
  // repeated bytes intermediate_certificate = 3;
  total_size += 1 * this->intermediate_certificate_size();
  for (int i = 0; i < this->intermediate_certificate_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->intermediate_certificate(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResponse*>(&from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  intermediate_certificate_.MergeFrom(from.intermediate_certificate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_client_auth_certificate()) {
      set_client_auth_certificate(from.client_auth_certificate());
    }
    if (from.has_signature_algorithm()) {
      set_signature_algorithm(from.signature_algorithm());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(client_auth_certificate_, other->client_auth_certificate_);
    intermediate_certificate_.Swap(&other->intermediate_certificate_);
    std::swap(signature_algorithm_, other->signature_algorithm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthResponse::GetTypeName() const {
  return "extensions.core_api.cast_channel.AuthResponse";
}


// ===================================================================

bool AuthError_ErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AuthError_ErrorType AuthError::INTERNAL_ERROR;
const AuthError_ErrorType AuthError::NO_TLS;
const AuthError_ErrorType AuthError::SIGNATURE_ALGORITHM_UNAVAILABLE;
const AuthError_ErrorType AuthError::ErrorType_MIN;
const AuthError_ErrorType AuthError::ErrorType_MAX;
const int AuthError::ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AuthError::kErrorTypeFieldNumber;
#endif  // !_MSC_VER

AuthError::AuthError()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.core_api.cast_channel.AuthError)
}

void AuthError::InitAsDefaultInstance() {
}

AuthError::AuthError(const AuthError& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.core_api.cast_channel.AuthError)
}

void AuthError::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthError::~AuthError() {
  // @@protoc_insertion_point(destructor:extensions.core_api.cast_channel.AuthError)
  SharedDtor();
}

void AuthError::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthError& AuthError::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cast_5fchannel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cast_5fchannel_2eproto();
#endif
  return *default_instance_;
}

AuthError* AuthError::default_instance_ = NULL;

AuthError* AuthError::New() const {
  return new AuthError;
}

void AuthError::Clear() {
  error_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:extensions.core_api.cast_channel.AuthError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::core_api::cast_channel::AuthError_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::extensions::core_api::cast_channel::AuthError_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.core_api.cast_channel.AuthError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.core_api.cast_channel.AuthError)
  return false;
#undef DO_
}

void AuthError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.core_api.cast_channel.AuthError)
  // required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:extensions.core_api.cast_channel.AuthError)
}

int AuthError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthError*>(&from));
}

void AuthError::MergeFrom(const AuthError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthError::CopyFrom(const AuthError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthError::Swap(AuthError* other) {
  if (other != this) {
    std::swap(error_type_, other->error_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AuthError::GetTypeName() const {
  return "extensions.core_api.cast_channel.AuthError";
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAuthMessage::kChallengeFieldNumber;
const int DeviceAuthMessage::kResponseFieldNumber;
const int DeviceAuthMessage::kErrorFieldNumber;
#endif  // !_MSC_VER

DeviceAuthMessage::DeviceAuthMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.core_api.cast_channel.DeviceAuthMessage)
}

void DeviceAuthMessage::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  challenge_ = const_cast< ::extensions::core_api::cast_channel::AuthChallenge*>(
      ::extensions::core_api::cast_channel::AuthChallenge::internal_default_instance());
#else
  challenge_ = const_cast< ::extensions::core_api::cast_channel::AuthChallenge*>(&::extensions::core_api::cast_channel::AuthChallenge::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  response_ = const_cast< ::extensions::core_api::cast_channel::AuthResponse*>(
      ::extensions::core_api::cast_channel::AuthResponse::internal_default_instance());
#else
  response_ = const_cast< ::extensions::core_api::cast_channel::AuthResponse*>(&::extensions::core_api::cast_channel::AuthResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  error_ = const_cast< ::extensions::core_api::cast_channel::AuthError*>(
      ::extensions::core_api::cast_channel::AuthError::internal_default_instance());
#else
  error_ = const_cast< ::extensions::core_api::cast_channel::AuthError*>(&::extensions::core_api::cast_channel::AuthError::default_instance());
#endif
}

DeviceAuthMessage::DeviceAuthMessage(const DeviceAuthMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:extensions.core_api.cast_channel.DeviceAuthMessage)
}

void DeviceAuthMessage::SharedCtor() {
  _cached_size_ = 0;
  challenge_ = NULL;
  response_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAuthMessage::~DeviceAuthMessage() {
  // @@protoc_insertion_point(destructor:extensions.core_api.cast_channel.DeviceAuthMessage)
  SharedDtor();
}

void DeviceAuthMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete challenge_;
    delete response_;
    delete error_;
  }
}

void DeviceAuthMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceAuthMessage& DeviceAuthMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cast_5fchannel_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cast_5fchannel_2eproto();
#endif
  return *default_instance_;
}

DeviceAuthMessage* DeviceAuthMessage::default_instance_ = NULL;

DeviceAuthMessage* DeviceAuthMessage::New() const {
  return new DeviceAuthMessage;
}

void DeviceAuthMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_challenge()) {
      if (challenge_ != NULL) challenge_->::extensions::core_api::cast_channel::AuthChallenge::Clear();
    }
    if (has_response()) {
      if (response_ != NULL) response_->::extensions::core_api::cast_channel::AuthResponse::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::extensions::core_api::cast_channel::AuthError::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeviceAuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:extensions.core_api.cast_channel.DeviceAuthMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .extensions.core_api.cast_channel.AuthResponse response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }

      // optional .extensions.core_api.cast_channel.AuthError error = 3;
      case 3: {
        if (tag == 26) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.core_api.cast_channel.DeviceAuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.core_api.cast_channel.DeviceAuthMessage)
  return false;
#undef DO_
}

void DeviceAuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.core_api.cast_channel.DeviceAuthMessage)
  // optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->challenge(), output);
  }

  // optional .extensions.core_api.cast_channel.AuthResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->response(), output);
  }

  // optional .extensions.core_api.cast_channel.AuthError error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->error(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:extensions.core_api.cast_channel.DeviceAuthMessage)
}

int DeviceAuthMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge());
    }

    // optional .extensions.core_api.cast_channel.AuthResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->response());
    }

    // optional .extensions.core_api.cast_channel.AuthError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAuthMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAuthMessage*>(&from));
}

void DeviceAuthMessage::MergeFrom(const DeviceAuthMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challenge()) {
      mutable_challenge()->::extensions::core_api::cast_channel::AuthChallenge::MergeFrom(from.challenge());
    }
    if (from.has_response()) {
      mutable_response()->::extensions::core_api::cast_channel::AuthResponse::MergeFrom(from.response());
    }
    if (from.has_error()) {
      mutable_error()->::extensions::core_api::cast_channel::AuthError::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeviceAuthMessage::CopyFrom(const DeviceAuthMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAuthMessage::IsInitialized() const {

  if (has_response()) {
    if (!this->response().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DeviceAuthMessage::Swap(DeviceAuthMessage* other) {
  if (other != this) {
    std::swap(challenge_, other->challenge_);
    std::swap(response_, other->response_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeviceAuthMessage::GetTypeName() const {
  return "extensions.core_api.cast_channel.DeviceAuthMessage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cast_channel
}  // namespace core_api
}  // namespace extensions

// @@protoc_insertion_point(global_scope)
