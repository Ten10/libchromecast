// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto

#ifndef PROTOBUF_cast_5fchannel_2eproto__INCLUDED
#define PROTOBUF_cast_5fchannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace extensions {
namespace core_api {
namespace cast_channel {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cast_5fchannel_2eproto();
void protobuf_AssignDesc_cast_5fchannel_2eproto();
void protobuf_ShutdownFile_cast_5fchannel_2eproto();

class CastMessage;
class AuthChallenge;
class AuthResponse;
class AuthError;
class DeviceAuthMessage;

enum CastMessage_ProtocolVersion {
  CastMessage_ProtocolVersion_CASTV2_1_0 = 0
};
bool CastMessage_ProtocolVersion_IsValid(int value);
const CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MIN = CastMessage_ProtocolVersion_CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MAX = CastMessage_ProtocolVersion_CASTV2_1_0;
const int CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE = CastMessage_ProtocolVersion_ProtocolVersion_MAX + 1;

enum CastMessage_PayloadType {
  CastMessage_PayloadType_STRING = 0,
  CastMessage_PayloadType_BINARY = 1
};
bool CastMessage_PayloadType_IsValid(int value);
const CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MIN = CastMessage_PayloadType_STRING;
const CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MAX = CastMessage_PayloadType_BINARY;
const int CastMessage_PayloadType_PayloadType_ARRAYSIZE = CastMessage_PayloadType_PayloadType_MAX + 1;

enum AuthError_ErrorType {
  AuthError_ErrorType_INTERNAL_ERROR = 0,
  AuthError_ErrorType_NO_TLS = 1,
  AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE = 2
};
bool AuthError_ErrorType_IsValid(int value);
const AuthError_ErrorType AuthError_ErrorType_ErrorType_MIN = AuthError_ErrorType_INTERNAL_ERROR;
const AuthError_ErrorType AuthError_ErrorType_ErrorType_MAX = AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE;
const int AuthError_ErrorType_ErrorType_ARRAYSIZE = AuthError_ErrorType_ErrorType_MAX + 1;

enum SignatureAlgorithm {
  UNSPECIFIED = 0,
  RSASSA_PKCS1v15 = 1,
  RSASSA_PSS = 2
};
bool SignatureAlgorithm_IsValid(int value);
const SignatureAlgorithm SignatureAlgorithm_MIN = UNSPECIFIED;
const SignatureAlgorithm SignatureAlgorithm_MAX = RSASSA_PSS;
const int SignatureAlgorithm_ARRAYSIZE = SignatureAlgorithm_MAX + 1;

// ===================================================================

class CastMessage : public ::google::protobuf::MessageLite {
 public:
  CastMessage();
  virtual ~CastMessage();

  CastMessage(const CastMessage& from);

  inline CastMessage& operator=(const CastMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const CastMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CastMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CastMessage* other);

  // implements Message ----------------------------------------------

  CastMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CastMessage& from);
  void MergeFrom(const CastMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef CastMessage_ProtocolVersion ProtocolVersion;
  static const ProtocolVersion CASTV2_1_0 = CastMessage_ProtocolVersion_CASTV2_1_0;
  static inline bool ProtocolVersion_IsValid(int value) {
    return CastMessage_ProtocolVersion_IsValid(value);
  }
  static const ProtocolVersion ProtocolVersion_MIN =
    CastMessage_ProtocolVersion_ProtocolVersion_MIN;
  static const ProtocolVersion ProtocolVersion_MAX =
    CastMessage_ProtocolVersion_ProtocolVersion_MAX;
  static const int ProtocolVersion_ARRAYSIZE =
    CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE;

  typedef CastMessage_PayloadType PayloadType;
  static const PayloadType STRING = CastMessage_PayloadType_STRING;
  static const PayloadType BINARY = CastMessage_PayloadType_BINARY;
  static inline bool PayloadType_IsValid(int value) {
    return CastMessage_PayloadType_IsValid(value);
  }
  static const PayloadType PayloadType_MIN =
    CastMessage_PayloadType_PayloadType_MIN;
  static const PayloadType PayloadType_MAX =
    CastMessage_PayloadType_PayloadType_MAX;
  static const int PayloadType_ARRAYSIZE =
    CastMessage_PayloadType_PayloadType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  inline ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion protocol_version() const;
  inline void set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value);

  // required string source_id = 2;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  inline const ::std::string& source_id() const;
  inline void set_source_id(const ::std::string& value);
  inline void set_source_id(const char* value);
  inline void set_source_id(const char* value, size_t size);
  inline ::std::string* mutable_source_id();
  inline ::std::string* release_source_id();
  inline void set_allocated_source_id(::std::string* source_id);

  // required string destination_id = 3;
  inline bool has_destination_id() const;
  inline void clear_destination_id();
  static const int kDestinationIdFieldNumber = 3;
  inline const ::std::string& destination_id() const;
  inline void set_destination_id(const ::std::string& value);
  inline void set_destination_id(const char* value);
  inline void set_destination_id(const char* value, size_t size);
  inline ::std::string* mutable_destination_id();
  inline ::std::string* release_destination_id();
  inline void set_allocated_destination_id(::std::string* destination_id);

  // required string namespace = 4;
  inline bool has_namespace_() const;
  inline void clear_namespace_();
  static const int kNamespaceFieldNumber = 4;
  inline const ::std::string& namespace_() const;
  inline void set_namespace_(const ::std::string& value);
  inline void set_namespace_(const char* value);
  inline void set_namespace_(const char* value, size_t size);
  inline ::std::string* mutable_namespace_();
  inline ::std::string* release_namespace_();
  inline void set_allocated_namespace_(::std::string* namespace_);

  // required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
  inline bool has_payload_type() const;
  inline void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 5;
  inline ::extensions::core_api::cast_channel::CastMessage_PayloadType payload_type() const;
  inline void set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value);

  // optional string payload_utf8 = 6;
  inline bool has_payload_utf8() const;
  inline void clear_payload_utf8();
  static const int kPayloadUtf8FieldNumber = 6;
  inline const ::std::string& payload_utf8() const;
  inline void set_payload_utf8(const ::std::string& value);
  inline void set_payload_utf8(const char* value);
  inline void set_payload_utf8(const char* value, size_t size);
  inline ::std::string* mutable_payload_utf8();
  inline ::std::string* release_payload_utf8();
  inline void set_allocated_payload_utf8(::std::string* payload_utf8);

  // optional bytes payload_binary = 7;
  inline bool has_payload_binary() const;
  inline void clear_payload_binary();
  static const int kPayloadBinaryFieldNumber = 7;
  inline const ::std::string& payload_binary() const;
  inline void set_payload_binary(const ::std::string& value);
  inline void set_payload_binary(const char* value);
  inline void set_payload_binary(const void* value, size_t size);
  inline ::std::string* mutable_payload_binary();
  inline ::std::string* release_payload_binary();
  inline void set_allocated_payload_binary(::std::string* payload_binary);

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.CastMessage)
 private:
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_source_id();
  inline void clear_has_source_id();
  inline void set_has_destination_id();
  inline void clear_has_destination_id();
  inline void set_has_namespace_();
  inline void clear_has_namespace_();
  inline void set_has_payload_type();
  inline void clear_has_payload_type();
  inline void set_has_payload_utf8();
  inline void clear_has_payload_utf8();
  inline void set_has_payload_binary();
  inline void clear_has_payload_binary();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_id_;
  ::std::string* destination_id_;
  int protocol_version_;
  int payload_type_;
  ::std::string* namespace__;
  ::std::string* payload_utf8_;
  ::std::string* payload_binary_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto();
  #endif
  friend void protobuf_AssignDesc_cast_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_cast_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static CastMessage* default_instance_;
};
// -------------------------------------------------------------------

class AuthChallenge : public ::google::protobuf::MessageLite {
 public:
  AuthChallenge();
  virtual ~AuthChallenge();

  AuthChallenge(const AuthChallenge& from);

  inline AuthChallenge& operator=(const AuthChallenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AuthChallenge& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AuthChallenge* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AuthChallenge* other);

  // implements Message ----------------------------------------------

  AuthChallenge* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AuthChallenge& from);
  void MergeFrom(const AuthChallenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
  inline bool has_signature_algorithm() const;
  inline void clear_signature_algorithm();
  static const int kSignatureAlgorithmFieldNumber = 1;
  inline ::extensions::core_api::cast_channel::SignatureAlgorithm signature_algorithm() const;
  inline void set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthChallenge)
 private:
  inline void set_has_signature_algorithm();
  inline void clear_has_signature_algorithm();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int signature_algorithm_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto();
  #endif
  friend void protobuf_AssignDesc_cast_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_cast_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static AuthChallenge* default_instance_;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::MessageLite {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AuthResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AuthResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AuthResponse* other);

  // implements Message ----------------------------------------------

  AuthResponse* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required bytes client_auth_certificate = 2;
  inline bool has_client_auth_certificate() const;
  inline void clear_client_auth_certificate();
  static const int kClientAuthCertificateFieldNumber = 2;
  inline const ::std::string& client_auth_certificate() const;
  inline void set_client_auth_certificate(const ::std::string& value);
  inline void set_client_auth_certificate(const char* value);
  inline void set_client_auth_certificate(const void* value, size_t size);
  inline ::std::string* mutable_client_auth_certificate();
  inline ::std::string* release_client_auth_certificate();
  inline void set_allocated_client_auth_certificate(::std::string* client_auth_certificate);

  // repeated bytes intermediate_certificate = 3;
  inline int intermediate_certificate_size() const;
  inline void clear_intermediate_certificate();
  static const int kIntermediateCertificateFieldNumber = 3;
  inline const ::std::string& intermediate_certificate(int index) const;
  inline ::std::string* mutable_intermediate_certificate(int index);
  inline void set_intermediate_certificate(int index, const ::std::string& value);
  inline void set_intermediate_certificate(int index, const char* value);
  inline void set_intermediate_certificate(int index, const void* value, size_t size);
  inline ::std::string* add_intermediate_certificate();
  inline void add_intermediate_certificate(const ::std::string& value);
  inline void add_intermediate_certificate(const char* value);
  inline void add_intermediate_certificate(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& intermediate_certificate() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_intermediate_certificate();

  // optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
  inline bool has_signature_algorithm() const;
  inline void clear_signature_algorithm();
  static const int kSignatureAlgorithmFieldNumber = 4;
  inline ::extensions::core_api::cast_channel::SignatureAlgorithm signature_algorithm() const;
  inline void set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value);

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthResponse)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_client_auth_certificate();
  inline void clear_has_client_auth_certificate();
  inline void set_has_signature_algorithm();
  inline void clear_has_signature_algorithm();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signature_;
  ::std::string* client_auth_certificate_;
  ::google::protobuf::RepeatedPtrField< ::std::string> intermediate_certificate_;
  int signature_algorithm_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto();
  #endif
  friend void protobuf_AssignDesc_cast_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_cast_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static AuthResponse* default_instance_;
};
// -------------------------------------------------------------------

class AuthError : public ::google::protobuf::MessageLite {
 public:
  AuthError();
  virtual ~AuthError();

  AuthError(const AuthError& from);

  inline AuthError& operator=(const AuthError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AuthError& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AuthError* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AuthError* other);

  // implements Message ----------------------------------------------

  AuthError* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AuthError& from);
  void MergeFrom(const AuthError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef AuthError_ErrorType ErrorType;
  static const ErrorType INTERNAL_ERROR = AuthError_ErrorType_INTERNAL_ERROR;
  static const ErrorType NO_TLS = AuthError_ErrorType_NO_TLS;
  static const ErrorType SIGNATURE_ALGORITHM_UNAVAILABLE = AuthError_ErrorType_SIGNATURE_ALGORITHM_UNAVAILABLE;
  static inline bool ErrorType_IsValid(int value) {
    return AuthError_ErrorType_IsValid(value);
  }
  static const ErrorType ErrorType_MIN =
    AuthError_ErrorType_ErrorType_MIN;
  static const ErrorType ErrorType_MAX =
    AuthError_ErrorType_ErrorType_MAX;
  static const int ErrorType_ARRAYSIZE =
    AuthError_ErrorType_ErrorType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
  inline bool has_error_type() const;
  inline void clear_error_type();
  static const int kErrorTypeFieldNumber = 1;
  inline ::extensions::core_api::cast_channel::AuthError_ErrorType error_type() const;
  inline void set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value);

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.AuthError)
 private:
  inline void set_has_error_type();
  inline void clear_has_error_type();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int error_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto();
  #endif
  friend void protobuf_AssignDesc_cast_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_cast_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static AuthError* default_instance_;
};
// -------------------------------------------------------------------

class DeviceAuthMessage : public ::google::protobuf::MessageLite {
 public:
  DeviceAuthMessage();
  virtual ~DeviceAuthMessage();

  DeviceAuthMessage(const DeviceAuthMessage& from);

  inline DeviceAuthMessage& operator=(const DeviceAuthMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DeviceAuthMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DeviceAuthMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DeviceAuthMessage* other);

  // implements Message ----------------------------------------------

  DeviceAuthMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DeviceAuthMessage& from);
  void MergeFrom(const DeviceAuthMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 1;
  inline const ::extensions::core_api::cast_channel::AuthChallenge& challenge() const;
  inline ::extensions::core_api::cast_channel::AuthChallenge* mutable_challenge();
  inline ::extensions::core_api::cast_channel::AuthChallenge* release_challenge();
  inline void set_allocated_challenge(::extensions::core_api::cast_channel::AuthChallenge* challenge);

  // optional .extensions.core_api.cast_channel.AuthResponse response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::extensions::core_api::cast_channel::AuthResponse& response() const;
  inline ::extensions::core_api::cast_channel::AuthResponse* mutable_response();
  inline ::extensions::core_api::cast_channel::AuthResponse* release_response();
  inline void set_allocated_response(::extensions::core_api::cast_channel::AuthResponse* response);

  // optional .extensions.core_api.cast_channel.AuthError error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::extensions::core_api::cast_channel::AuthError& error() const;
  inline ::extensions::core_api::cast_channel::AuthError* mutable_error();
  inline ::extensions::core_api::cast_channel::AuthError* release_error();
  inline void set_allocated_error(::extensions::core_api::cast_channel::AuthError* error);

  // @@protoc_insertion_point(class_scope:extensions.core_api.cast_channel.DeviceAuthMessage)
 private:
  inline void set_has_challenge();
  inline void clear_has_challenge();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_error();
  inline void clear_has_error();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::extensions::core_api::cast_channel::AuthChallenge* challenge_;
  ::extensions::core_api::cast_channel::AuthResponse* response_;
  ::extensions::core_api::cast_channel::AuthError* error_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_cast_5fchannel_2eproto();
  #endif
  friend void protobuf_AssignDesc_cast_5fchannel_2eproto();
  friend void protobuf_ShutdownFile_cast_5fchannel_2eproto();

  void InitAsDefaultInstance();
  static DeviceAuthMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// CastMessage

// required .extensions.core_api.cast_channel.CastMessage.ProtocolVersion protocol_version = 1;
inline bool CastMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastMessage::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion CastMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.protocol_version)
  return static_cast< ::extensions::core_api::cast_channel::CastMessage_ProtocolVersion >(protocol_version_);
}
inline void CastMessage::set_protocol_version(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion value) {
  assert(::extensions::core_api::cast_channel::CastMessage_ProtocolVersion_IsValid(value));
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.protocol_version)
}

// required string source_id = 2;
inline bool CastMessage::has_source_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastMessage::set_has_source_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastMessage::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastMessage::clear_source_id() {
  if (source_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_id_->clear();
  }
  clear_has_source_id();
}
inline const ::std::string& CastMessage::source_id() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.source_id)
  return *source_id_;
}
inline void CastMessage::set_source_id(const ::std::string& value) {
  set_has_source_id();
  if (source_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_id_ = new ::std::string;
  }
  source_id_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline void CastMessage::set_source_id(const char* value) {
  set_has_source_id();
  if (source_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_id_ = new ::std::string;
  }
  source_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline void CastMessage::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  if (source_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_id_ = new ::std::string;
  }
  source_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.source_id)
}
inline ::std::string* CastMessage::mutable_source_id() {
  set_has_source_id();
  if (source_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.source_id)
  return source_id_;
}
inline ::std::string* CastMessage::release_source_id() {
  clear_has_source_id();
  if (source_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_id_;
    source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CastMessage::set_allocated_source_id(::std::string* source_id) {
  if (source_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_id_;
  }
  if (source_id) {
    set_has_source_id();
    source_id_ = source_id;
  } else {
    clear_has_source_id();
    source_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.source_id)
}

// required string destination_id = 3;
inline bool CastMessage::has_destination_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastMessage::set_has_destination_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastMessage::clear_has_destination_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastMessage::clear_destination_id() {
  if (destination_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_id_->clear();
  }
  clear_has_destination_id();
}
inline const ::std::string& CastMessage::destination_id() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.destination_id)
  return *destination_id_;
}
inline void CastMessage::set_destination_id(const ::std::string& value) {
  set_has_destination_id();
  if (destination_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_id_ = new ::std::string;
  }
  destination_id_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline void CastMessage::set_destination_id(const char* value) {
  set_has_destination_id();
  if (destination_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_id_ = new ::std::string;
  }
  destination_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline void CastMessage::set_destination_id(const char* value, size_t size) {
  set_has_destination_id();
  if (destination_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_id_ = new ::std::string;
  }
  destination_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.destination_id)
}
inline ::std::string* CastMessage::mutable_destination_id() {
  set_has_destination_id();
  if (destination_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    destination_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.destination_id)
  return destination_id_;
}
inline ::std::string* CastMessage::release_destination_id() {
  clear_has_destination_id();
  if (destination_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = destination_id_;
    destination_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CastMessage::set_allocated_destination_id(::std::string* destination_id) {
  if (destination_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_id_;
  }
  if (destination_id) {
    set_has_destination_id();
    destination_id_ = destination_id;
  } else {
    clear_has_destination_id();
    destination_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.destination_id)
}

// required string namespace = 4;
inline bool CastMessage::has_namespace_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastMessage::set_has_namespace_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastMessage::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastMessage::clear_namespace_() {
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namespace__->clear();
  }
  clear_has_namespace_();
}
inline const ::std::string& CastMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.namespace)
  return *namespace__;
}
inline void CastMessage::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  if (namespace__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline void CastMessage::set_namespace_(const char* value) {
  set_has_namespace_();
  if (namespace__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline void CastMessage::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  if (namespace__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namespace__ = new ::std::string;
  }
  namespace__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.namespace)
}
inline ::std::string* CastMessage::mutable_namespace_() {
  set_has_namespace_();
  if (namespace__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    namespace__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.namespace)
  return namespace__;
}
inline ::std::string* CastMessage::release_namespace_() {
  clear_has_namespace_();
  if (namespace__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = namespace__;
    namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CastMessage::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete namespace__;
  }
  if (namespace_) {
    set_has_namespace_();
    namespace__ = namespace_;
  } else {
    clear_has_namespace_();
    namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.namespace)
}

// required .extensions.core_api.cast_channel.CastMessage.PayloadType payload_type = 5;
inline bool CastMessage::has_payload_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastMessage::set_has_payload_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastMessage::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastMessage::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::extensions::core_api::cast_channel::CastMessage_PayloadType CastMessage::payload_type() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_type)
  return static_cast< ::extensions::core_api::cast_channel::CastMessage_PayloadType >(payload_type_);
}
inline void CastMessage::set_payload_type(::extensions::core_api::cast_channel::CastMessage_PayloadType value) {
  assert(::extensions::core_api::cast_channel::CastMessage_PayloadType_IsValid(value));
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_type)
}

// optional string payload_utf8 = 6;
inline bool CastMessage::has_payload_utf8() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastMessage::set_has_payload_utf8() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CastMessage::clear_has_payload_utf8() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CastMessage::clear_payload_utf8() {
  if (payload_utf8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_utf8_->clear();
  }
  clear_has_payload_utf8();
}
inline const ::std::string& CastMessage::payload_utf8() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_utf8)
  return *payload_utf8_;
}
inline void CastMessage::set_payload_utf8(const ::std::string& value) {
  set_has_payload_utf8();
  if (payload_utf8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_utf8_ = new ::std::string;
  }
  payload_utf8_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline void CastMessage::set_payload_utf8(const char* value) {
  set_has_payload_utf8();
  if (payload_utf8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_utf8_ = new ::std::string;
  }
  payload_utf8_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline void CastMessage::set_payload_utf8(const char* value, size_t size) {
  set_has_payload_utf8();
  if (payload_utf8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_utf8_ = new ::std::string;
  }
  payload_utf8_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}
inline ::std::string* CastMessage::mutable_payload_utf8() {
  set_has_payload_utf8();
  if (payload_utf8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_utf8_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.payload_utf8)
  return payload_utf8_;
}
inline ::std::string* CastMessage::release_payload_utf8() {
  clear_has_payload_utf8();
  if (payload_utf8_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_utf8_;
    payload_utf8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CastMessage::set_allocated_payload_utf8(::std::string* payload_utf8) {
  if (payload_utf8_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_utf8_;
  }
  if (payload_utf8) {
    set_has_payload_utf8();
    payload_utf8_ = payload_utf8;
  } else {
    clear_has_payload_utf8();
    payload_utf8_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.payload_utf8)
}

// optional bytes payload_binary = 7;
inline bool CastMessage::has_payload_binary() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CastMessage::set_has_payload_binary() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CastMessage::clear_has_payload_binary() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CastMessage::clear_payload_binary() {
  if (payload_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_binary_->clear();
  }
  clear_has_payload_binary();
}
inline const ::std::string& CastMessage::payload_binary() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.CastMessage.payload_binary)
  return *payload_binary_;
}
inline void CastMessage::set_payload_binary(const ::std::string& value) {
  set_has_payload_binary();
  if (payload_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_binary_ = new ::std::string;
  }
  payload_binary_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline void CastMessage::set_payload_binary(const char* value) {
  set_has_payload_binary();
  if (payload_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_binary_ = new ::std::string;
  }
  payload_binary_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline void CastMessage::set_payload_binary(const void* value, size_t size) {
  set_has_payload_binary();
  if (payload_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_binary_ = new ::std::string;
  }
  payload_binary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.CastMessage.payload_binary)
}
inline ::std::string* CastMessage::mutable_payload_binary() {
  set_has_payload_binary();
  if (payload_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_binary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.CastMessage.payload_binary)
  return payload_binary_;
}
inline ::std::string* CastMessage::release_payload_binary() {
  clear_has_payload_binary();
  if (payload_binary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_binary_;
    payload_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CastMessage::set_allocated_payload_binary(::std::string* payload_binary) {
  if (payload_binary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_binary_;
  }
  if (payload_binary) {
    set_has_payload_binary();
    payload_binary_ = payload_binary;
  } else {
    clear_has_payload_binary();
    payload_binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.CastMessage.payload_binary)
}

// -------------------------------------------------------------------

// AuthChallenge

// optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 1 [default = RSASSA_PKCS1v15];
inline bool AuthChallenge::has_signature_algorithm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthChallenge::set_has_signature_algorithm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthChallenge::clear_has_signature_algorithm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthChallenge::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  clear_has_signature_algorithm();
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthChallenge::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthChallenge.signature_algorithm)
  return static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
inline void AuthChallenge::set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  assert(::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value));
  set_has_signature_algorithm();
  signature_algorithm_ = value;
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthChallenge.signature_algorithm)
}

// -------------------------------------------------------------------

// AuthResponse

// required bytes signature = 1;
inline bool AuthResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResponse::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& AuthResponse::signature() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.signature)
  return *signature_;
}
inline void AuthResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline void AuthResponse::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline void AuthResponse::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.signature)
}
inline ::std::string* AuthResponse::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.signature)
  return signature_;
}
inline ::std::string* AuthResponse::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthResponse::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.AuthResponse.signature)
}

// required bytes client_auth_certificate = 2;
inline bool AuthResponse::has_client_auth_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthResponse::set_has_client_auth_certificate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthResponse::clear_has_client_auth_certificate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthResponse::clear_client_auth_certificate() {
  if (client_auth_certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_auth_certificate_->clear();
  }
  clear_has_client_auth_certificate();
}
inline const ::std::string& AuthResponse::client_auth_certificate() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
  return *client_auth_certificate_;
}
inline void AuthResponse::set_client_auth_certificate(const ::std::string& value) {
  set_has_client_auth_certificate();
  if (client_auth_certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_auth_certificate_ = new ::std::string;
  }
  client_auth_certificate_->assign(value);
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline void AuthResponse::set_client_auth_certificate(const char* value) {
  set_has_client_auth_certificate();
  if (client_auth_certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_auth_certificate_ = new ::std::string;
  }
  client_auth_certificate_->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline void AuthResponse::set_client_auth_certificate(const void* value, size_t size) {
  set_has_client_auth_certificate();
  if (client_auth_certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_auth_certificate_ = new ::std::string;
  }
  client_auth_certificate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}
inline ::std::string* AuthResponse::mutable_client_auth_certificate() {
  set_has_client_auth_certificate();
  if (client_auth_certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_auth_certificate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_;
}
inline ::std::string* AuthResponse::release_client_auth_certificate() {
  clear_has_client_auth_certificate();
  if (client_auth_certificate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_auth_certificate_;
    client_auth_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AuthResponse::set_allocated_client_auth_certificate(::std::string* client_auth_certificate) {
  if (client_auth_certificate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_auth_certificate_;
  }
  if (client_auth_certificate) {
    set_has_client_auth_certificate();
    client_auth_certificate_ = client_auth_certificate;
  } else {
    clear_has_client_auth_certificate();
    client_auth_certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.AuthResponse.client_auth_certificate)
}

// repeated bytes intermediate_certificate = 3;
inline int AuthResponse::intermediate_certificate_size() const {
  return intermediate_certificate_.size();
}
inline void AuthResponse::clear_intermediate_certificate() {
  intermediate_certificate_.Clear();
}
inline const ::std::string& AuthResponse::intermediate_certificate(int index) const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Get(index);
}
inline ::std::string* AuthResponse::mutable_intermediate_certificate(int index) {
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_.Mutable(index);
}
inline void AuthResponse::set_intermediate_certificate(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  intermediate_certificate_.Mutable(index)->assign(value);
}
inline void AuthResponse::set_intermediate_certificate(int index, const char* value) {
  intermediate_certificate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::set_intermediate_certificate(int index, const void* value, size_t size) {
  intermediate_certificate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline ::std::string* AuthResponse::add_intermediate_certificate() {
  return intermediate_certificate_.Add();
}
inline void AuthResponse::add_intermediate_certificate(const ::std::string& value) {
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::add_intermediate_certificate(const char* value) {
  intermediate_certificate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline void AuthResponse::add_intermediate_certificate(const void* value, size_t size) {
  intermediate_certificate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AuthResponse::intermediate_certificate() const {
  // @@protoc_insertion_point(field_list:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return intermediate_certificate_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AuthResponse::mutable_intermediate_certificate() {
  // @@protoc_insertion_point(field_mutable_list:extensions.core_api.cast_channel.AuthResponse.intermediate_certificate)
  return &intermediate_certificate_;
}

// optional .extensions.core_api.cast_channel.SignatureAlgorithm signature_algorithm = 4 [default = RSASSA_PKCS1v15];
inline bool AuthResponse::has_signature_algorithm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AuthResponse::set_has_signature_algorithm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AuthResponse::clear_has_signature_algorithm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AuthResponse::clear_signature_algorithm() {
  signature_algorithm_ = 1;
  clear_has_signature_algorithm();
}
inline ::extensions::core_api::cast_channel::SignatureAlgorithm AuthResponse::signature_algorithm() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthResponse.signature_algorithm)
  return static_cast< ::extensions::core_api::cast_channel::SignatureAlgorithm >(signature_algorithm_);
}
inline void AuthResponse::set_signature_algorithm(::extensions::core_api::cast_channel::SignatureAlgorithm value) {
  assert(::extensions::core_api::cast_channel::SignatureAlgorithm_IsValid(value));
  set_has_signature_algorithm();
  signature_algorithm_ = value;
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthResponse.signature_algorithm)
}

// -------------------------------------------------------------------

// AuthError

// required .extensions.core_api.cast_channel.AuthError.ErrorType error_type = 1;
inline bool AuthError::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthError::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthError::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthError::clear_error_type() {
  error_type_ = 0;
  clear_has_error_type();
}
inline ::extensions::core_api::cast_channel::AuthError_ErrorType AuthError::error_type() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.AuthError.error_type)
  return static_cast< ::extensions::core_api::cast_channel::AuthError_ErrorType >(error_type_);
}
inline void AuthError::set_error_type(::extensions::core_api::cast_channel::AuthError_ErrorType value) {
  assert(::extensions::core_api::cast_channel::AuthError_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:extensions.core_api.cast_channel.AuthError.error_type)
}

// -------------------------------------------------------------------

// DeviceAuthMessage

// optional .extensions.core_api.cast_channel.AuthChallenge challenge = 1;
inline bool DeviceAuthMessage::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAuthMessage::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAuthMessage::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAuthMessage::clear_challenge() {
  if (challenge_ != NULL) challenge_->::extensions::core_api::cast_channel::AuthChallenge::Clear();
  clear_has_challenge();
}
inline const ::extensions::core_api::cast_channel::AuthChallenge& DeviceAuthMessage::challenge() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return challenge_ != NULL ? *challenge_ : *default_instance().challenge_;
#else
  return challenge_ != NULL ? *challenge_ : *default_instance_->challenge_;
#endif
}
inline ::extensions::core_api::cast_channel::AuthChallenge* DeviceAuthMessage::mutable_challenge() {
  set_has_challenge();
  if (challenge_ == NULL) challenge_ = new ::extensions::core_api::cast_channel::AuthChallenge;
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
  return challenge_;
}
inline ::extensions::core_api::cast_channel::AuthChallenge* DeviceAuthMessage::release_challenge() {
  clear_has_challenge();
  ::extensions::core_api::cast_channel::AuthChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
inline void DeviceAuthMessage::set_allocated_challenge(::extensions::core_api::cast_channel::AuthChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.challenge)
}

// optional .extensions.core_api.cast_channel.AuthResponse response = 2;
inline bool DeviceAuthMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAuthMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceAuthMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAuthMessage::clear_response() {
  if (response_ != NULL) response_->::extensions::core_api::cast_channel::AuthResponse::Clear();
  clear_has_response();
}
inline const ::extensions::core_api::cast_channel::AuthResponse& DeviceAuthMessage::response() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.response)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return response_ != NULL ? *response_ : *default_instance().response_;
#else
  return response_ != NULL ? *response_ : *default_instance_->response_;
#endif
}
inline ::extensions::core_api::cast_channel::AuthResponse* DeviceAuthMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::extensions::core_api::cast_channel::AuthResponse;
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.response)
  return response_;
}
inline ::extensions::core_api::cast_channel::AuthResponse* DeviceAuthMessage::release_response() {
  clear_has_response();
  ::extensions::core_api::cast_channel::AuthResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void DeviceAuthMessage::set_allocated_response(::extensions::core_api::cast_channel::AuthResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.response)
}

// optional .extensions.core_api.cast_channel.AuthError error = 3;
inline bool DeviceAuthMessage::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAuthMessage::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceAuthMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAuthMessage::clear_error() {
  if (error_ != NULL) error_->::extensions::core_api::cast_channel::AuthError::Clear();
  clear_has_error();
}
inline const ::extensions::core_api::cast_channel::AuthError& DeviceAuthMessage::error() const {
  // @@protoc_insertion_point(field_get:extensions.core_api.cast_channel.DeviceAuthMessage.error)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return error_ != NULL ? *error_ : *default_instance().error_;
#else
  return error_ != NULL ? *error_ : *default_instance_->error_;
#endif
}
inline ::extensions::core_api::cast_channel::AuthError* DeviceAuthMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::extensions::core_api::cast_channel::AuthError;
  // @@protoc_insertion_point(field_mutable:extensions.core_api.cast_channel.DeviceAuthMessage.error)
  return error_;
}
inline ::extensions::core_api::cast_channel::AuthError* DeviceAuthMessage::release_error() {
  clear_has_error();
  ::extensions::core_api::cast_channel::AuthError* temp = error_;
  error_ = NULL;
  return temp;
}
inline void DeviceAuthMessage::set_allocated_error(::extensions::core_api::cast_channel::AuthError* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:extensions.core_api.cast_channel.DeviceAuthMessage.error)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cast_channel
}  // namespace core_api
}  // namespace extensions

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cast_5fchannel_2eproto__INCLUDED
